// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`test wrap-memo-hook > wrap-memo-hook base 1`] = `
"import { useCallback, useMemo, CSSProperties, useState, useRef, useEffect } from "react";
import { ModalInfoType, Modal } from "./../../../../share-comps/modal.tsx";

const width = '1px';
const size = 10;
const mock = '33';

function NoInlineLiteralObject(props: { text: string }) {
    const [backgroundColor, setBackgroundColor] = useState('#000');

    const {z2: _width} = { z2: 2};
    
    const divStyle = useMemo<CSSProperties | undefined>(() => { return { height: '3px', backgroundColor, width: _width }; }, [backgroundColor, _width]);
    
    const boxStyle = useMemo<CSSProperties | undefined>(() => { return { width: _width }; }, [_width]);
    
    const handleModalClick = useCallback<(Parameters<typeof Modal>[0]["onClick"]) & Function>(({ count }) => {
        console.log(props.text);
        console.log("=>(in.tsx:17) count", count);
    }, [props.text, props]);
    console.log('width', width);
    return <div style={divStyle}>
        <Box style={boxStyle}></Box>
        <Modal info={ModalInfo}
               onClick={handleModalClick}/>
        <div style={divStyle1}></div>
    </div>
}

type StyleType = React.CSSProperties;

function Box(props: { style?: StyleType }) {
    return <div style={props.style}>box</div>
}
const divStyle1: CSSProperties | undefined = { width };
const ModalInfo: ModalInfoType | undefined = { size: 10 };

"
`;

exports[`test wrap-memo-hook > wrap-memo-hook deps-no-native 1`] = `
"import {Dialog} from "../../../../share-comps/dialog.tsx";
import { useCallback, useMemo, useRef, useState } from "react";


function Dummy() {

    const [count, setCount] = useState(1);
    const numberRef = useRef(0);
    
    const dialogWidth = useMemo<Parameters<typeof Dialog>[0]["width"]>(() => { return { get: () => numberRef.current }; }, []);
    
    const handleDialogClose = useCallback<(Parameters<typeof Dialog>[0]["onClose"]) & Function>(() => {
        const obj = {
            value: 1,
        };
        console.log("=>(in.tsx:10) hello", obj.value);
        setCount(count + 1);
    }, [count]);
    return <div>
        <Dialog width={dialogWidth}

                onClose={handleDialogClose}
        />

    </div>
}
"
`;

exports[`test wrap-memo-hook > wrap-memo-hook extract-const 1`] = `
"import {Modal} from "../../../../share-comps/modal.tsx";
import { useCallback } from "react";


const MyFc = () => {

    
    const handleSimpleFcDispose = useCallback<(Parameters<typeof SimpleFc>[0]["onDispose"]) & Function>(() => {
        console.log('Dispose');
    }, []);
    
    const handleModalClose = useCallback<(Parameters<typeof Modal>[0]["onClose"]) & Function>(() => { console.log('Modal closed'); }, []);
    return <>
        <SimpleFc onDispose={handleSimpleFcDispose} />

        <Modal pattern={ModalPattern}  onClose={handleModalClose }/>
    </>
}


type ByAlias = { pop?: { count: number}, onDispose?: () => void }

interface ByInterface { pop?: { count: number, onDispose?: () => void} }

const SimpleFc: React.FC<{ pop?: { count: number, }, onDispose?: () => void }> = () => {
    return <div>123</div>
}
const ModalPattern: Parameters<typeof Modal>[0]["pattern"] = /\\d/;
"
`;

exports[`test wrap-memo-hook > wrap-memo-hook ignore-list 1`] = `
"import ListDataArrayAlias, { ModalInfoType, Modal } from "./../../../../share-comps/modal.tsx";
import { useCallback, useMemo, useState } from "react";


function MyComponent() {

    const [size, setSize] = useState(10);
    const [message, setMessage] = useState('firstOne')
    const [id, setId] = useState('one')
    
    
    
    const doYourJob = useCallback(() => {
        console.log("=>(in.tsx:12) hello job", );
    }, []);
    
    const handleYourDuty = (content: string) => {
        console.log(\`=>(in.tsx:19) duty \${content}\`, );
    }
    
    const onAddToSubjectClick = (targetSubject: string) => {
    
    }
    
    const subjectList = useMemo(()=>{
        return []
    },[])

    
    
    const modalInfo = useMemo<ModalInfoType | undefined>(() => { return { size }; }, [size]);
    
    const modalList = useMemo<ListDataArrayAlias | undefined>(() => { return [{ id: 'second', message }]; }, [message]);
    
    const handleModalClick = useCallback<(Parameters<typeof Modal>[0]["onClick"]) & Function>((e) => {
        doYourJob();
        // handleYourDuty('Man!');
        // console.log("=>(in.tsx:14) e.count", e.count, size);
    }, [doYourJob]);
    return <>
        <Modal info={modalInfo}
               list={modalList}
               onClick={handleModalClick}
               
        />
        {
            subjectList.map(elem => <Modal onClose={() => {onAddToSubjectClick(elem)}}></Modal>)
        }
    </>
}



function Input (props: { onChange?: (e: { value: string }) => void }) {
    return <></>
}"
`;

exports[`test wrap-memo-hook > wrap-memo-hook mui-specific-sx 1`] = `
"import {Box} from "@mui/material";
import { Theme, SxProps } from "@mui/material";

function MyComponent() {

    return <Box sx={BoxSx}></Box>
}
const BoxSx: SxProps<Theme> | undefined = { width: 1 };
"
`;

exports[`test wrap-memo-hook > wrap-memo-hook native-element 1`] = `
"import { MouseEventHandler, CSSProperties, useState, useRef, useEffect, useMemo, useCallback } from "react";


function NoInlineLiteralObject(props: { fontSize: string }) {
    const [backgroundColor, setBackgroundColor] = useState('#000');
    const { fontSize } = props;
    const styles = {
        lineHeight: "inherit",
        nest: {
            value: 'inherit',
        }
    }

    const {z2: _width} = { z2: 2};
    
    const divStyle = useMemo<CSSProperties | undefined>(() => { return {
        height: '3px',
        backgroundColor,
        width: _width,
        fontSize: props.fontSize,
        lineHeight: styles.lineHeight,
        color: styles.nest['value'],
        scale: styles.nest.value,
        borderColor: styles.nest.value,
    }; }, [backgroundColor, _width, props.fontSize, props, styles.lineHeight, styles, styles.nest, styles.nest.value]);
    
    const handleDivClick = useCallback<MouseEventHandler<HTMLDivElement>>(() => {
        const info = {
            data: '123123'
        };
        console.log('=> info', info.data, fontSize);
    }, [fontSize]);
    return <div style={divStyle}
                onClick={handleDivClick}
    >
    </div>
}"
`;

exports[`test wrap-memo-hook > wrap-memo-hook reg-calls-new 1`] = `
"import ListDataArrayAlias, { ModalInfoType, Modal } from "./../../../../share-comps/modal.tsx";
import { useMemo, useCallback, useState } from "react";


function Test4() {

    const [size, setSize] = useState(10)

    const innerGenList = useCallback(() => {
        return [
            {
                id: 'asd',
                message: 'hello'
            }
        ]
    }, []);

    const innerGenInfo = useCallback((size: number) => {
        return {
            size: size + 20
        }
    }, []);

    
    const modalInfo = useMemo<ModalInfoType | undefined>(() => { return genInfo(size); }, [size]);
    
    const modalList = useMemo<ListDataArrayAlias | undefined>(() => { return innerGenList(); }, [innerGenList]);
    
    const modalList1 = useMemo<ListDataArrayAlias | undefined>(() => { return new ListFactory({ id: '23', message: size + '' }).list; }, [size]);
    
    const modalInfo1 = useMemo<ModalInfoType | undefined>(() => { return innerGenInfo(size); }, [innerGenInfo, size]);
    return <>

        <Modal list={ModalList}
               info={modalInfo}
        />

        <Modal list={modalList}
               info={modalInfo1}
        />


        <Modal info={ModalInfo}
               list={modalList1}
               pattern={ModalPattern}
        />
    </>
}

class ListFactory {
    list: ListDataArrayAlias = [];
    constructor(item: {id: string, message: string}) {
        this.list.push(item)
    }
}

class InfoFactory {
    size: number;

    constructor(size: number) {
        this.size = size + 10;
    }
}

function genList() {
    return [
        {
            id: 'asd',
            message: 'hello'
        }
    ]
}

function genInfo(size: number) {
    return {
        size
    }
}
const ModalPattern: Parameters<typeof Modal>[0]["pattern"] = new RegExp('^[a-z]', 'g');
const ModalInfo: ModalInfoType | undefined = new InfoFactory(30);
const ModalList: ListDataArrayAlias | undefined = genList();


"
`;
